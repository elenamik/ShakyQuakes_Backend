# -*- coding: utf-8 -*-
"""earthquakes_radon_anomaly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19WyoBVOMrvB3tvdfJkHI6lzaMFcKSpVz

Created using Watson Studio
"""

import numpy as np
import matplotlib.pyplot as plt
from pylab import savefig
from sklearn.ensemble import IsolationForest

import types
import pandas as pd
# from botocore.client import Config
# import ibm_boto3

def __iter__(self): return 0

# @hidden_cell
# The following code accesses a file in your IBM Cloud Object Storage. It includes your credentials.
# You might want to remove those credentials before you share your notebook.
# client_999c7023c4ff430b8eae8ae3c1fa3de3 = ibm_boto3.client(service_name='s3',
#     ibm_api_key_id='yZCls1xqztnz7nLkh3LYcU4bADswZxmOyJqyLAStXp72',
#     ibm_auth_endpoint="https://iam.eu-gb.bluemix.net/oidc/token",
#     config=Config(signature_version='oauth'),
#     endpoint_url='https://s3.eu-geo.objectstorage.service.networklayer.com')

# Your data file was loaded into a botocore.response.StreamingBody object.
# Please read the documentation of ibm_boto3 and pandas to learn more about your possibilities to load the data.
# ibm_boto3 documentation: https://ibm.github.io/ibm-cos-sdk-python/
# pandas documentation: http://pandas.pydata.org/
# streaming_body_1 = client_999c7023c4ff430b8eae8ae3c1fa3de3.get_object(Bucket='quakes-donotdelete-pr-swcs8e3gvvb1ov', Key='radon_data')['Body']
# # add missing __iter__ method, so pandas accepts body as file-like object
# if not hasattr(streaming_body_1, "__iter__"): streaming_body_1.__iter__ = types.MethodType( __iter__, streaming_body_1 )

# Your data file was loaded into a botocore.response.StreamingBody object.
# Please read the documentation of ibm_boto3 and pandas to learn more about your possibilities to load the data.
# ibm_boto3 documentation: https://ibm.github.io/ibm-cos-sdk-python/
# pandas documentation: http://pandas.pydata.org/
# streaming_body_2 = client_999c7023c4ff430b8eae8ae3c1fa3de3.get_object(Bucket='quakes-donotdelete-pr-swcs8e3gvvb1ov', Key='earthquake_radon')['Body']
# add missing __iter__ method so pandas accepts body as file-like object
# if not hasattr(streaming_body_2, "__iter__"): streaming_body_2.__iter__ = types.MethodType( __iter__, streaming_body_2 )

#df=pd.read_csv(streaming_body_1)
#earthquakes=pd.read_csv(streaming_body_2)
df=pd.read_csv('radon_data')
earthquakes=pd.read_csv('earthquake_radon')

def predict_anomalies(df):
    '''finds anomalies from given data and returns anomalous entries'''
    rng = np.random.RandomState(42)

    # Isolation Forest ----
    # unsupervised learning
    clf = IsolationForest(max_samples=200, random_state=rng)
    clf.fit(df)
    
    # predictions
    anomaly_predictions = clf.predict(df)
    
    return anomaly_predictions

def get_anomaly_values(df,anomaly_predictions):
    '''returns values for anomalous points'''
    predictions=anomaly_predictions.tolist()
    df2=df.assign(anomaly=predictions)    

    anomaly_val=[]
    for i in range(len(df2['anomaly'])):
      if df2['anomaly'][i]==-1:
        #print(df['Radon'][i])
        anomaly_val.append(df['Radon'][i])
        return anomaly_val

def accuracy(anomaly_predictions):
    # new, 'normal' observations ----
    print("Accuracy:", list(anomaly_predictions).count(1)/anomaly_predictions.shape[0])

#earthquakes
def get_detected_earthquakes(earthquakes,anomaly_val):
    '''returns list of detected earthquake indexes'''
    detected=[]
    for i in range(len(earthquakes['radon_level'])):
      if earthquakes['radon_level'][i] in anomaly_val:
        detected.append(i)
    return detected

def print_quakes(detected):
    '''prints entries'''
    for index in detected:
      obj=earthquakes.loc[index]
      print("Earthquake detected based on radon anomaly...")
      print("-->Date of Earthquake:",obj[1])
      print("-->Magnitude:",obj[2])
      print("-->Epicenter distance in km:",obj[3])
      print("-->Latitude:",obj[4])
      print("-->Longitude:",obj[5])
      print("-->Radon level detected:",obj[6])
      print()

anomaly=predict_anomalies(df)
values=get_anomaly_values(df,anomaly)
a=accuracy(anomaly)
detected=get_detected_earthquakes(earthquakes,values)

print_quakes(detected)

